{"title":"Gotify Server: Architecture and Core Components","id":"KHywo+MLT26ed2N//VYtU+oyh/MoEbsazZ5a7Zeyk9c=","steps":[{"type":"textOnly","description":"Welcome to the Gotify server project tour! Gotify is a self-hosted push notification service that allows you to send and receive messages in real-time. In this tour, we'll explore the core components of the server-side application, focusing on its architecture and key features.","title":"","id":"528"},{"type":"highlight","description":"Let's start by looking at the main function, which serves as the entry point for the Gotify server. This function sets up the essential components of the application.","file":"app.go","highlight":[{"start":28,"end":58}],"title":"","id":"529"},{"type":"revealFiles","files":["config/config.go"],"description":"The Configuration struct defines all the configurable options for the Gotify server. Let's explore its main components, starting with the Server settings.","title":"","id":"540"},{"type":"highlight","description":"The Server struct within Configuration contains essential settings for the Gotify server, including the listening address, port, and keep-alive period.","file":"config/config.go","highlight":[{"start":13,"end":16}],"title":"","id":"541"},{"type":"highlight","description":"The SSL struct defines settings for secure connections, including options for enabling SSL, redirecting to HTTPS, and configuring Let's Encrypt for automatic certificate management.","file":"config/config.go","highlight":[{"start":18,"end":31}],"title":"","id":"542"},{"type":"highlight","description":"The Configuration struct also includes settings for streaming (which enables real-time updates) and CORS (Cross-Origin Resource Sharing), allowing you to control access to your Gotify server from different domains.","file":"config/config.go","highlight":[{"start":32,"end":43}],"title":"","id":"543"},{"type":"highlight","description":"The Database struct within Configuration allows you to specify the database dialect and connection string. By default, Gotify uses SQLite, but it supports other databases as well.","file":"config/config.go","highlight":[{"start":45,"end":48}],"title":"","id":"544"},{"type":"highlight","description":"The Configuration struct also includes settings for the default user, password strength, upload directories, and whether user registration is allowed. These options provide flexibility in customizing your Gotify server deployment.","file":"config/config.go","highlight":[{"start":49,"end":57}],"title":"","id":"545"},{"type":"highlight","description":"The Create function in the router package is responsible for setting up all the HTTP routes for the Gotify server. Let's start by looking at the function signature and initial setup.","file":"router/router.go","highlight":[{"start":26,"end":32}],"title":"","id":"546"},{"type":"highlight","description":"The router setup begins with configuring middleware for logging, error handling, and IP address management.","file":"router/router.go","highlight":[{"start":34,"end":42}],"title":"","id":"547"},{"type":"highlight","description":"If SSL is enabled, the server sets up HTTPS redirection to ensure secure communication.","file":"router/router.go","highlight":[{"start":44,"end":65}],"title":"","id":"548"},{"type":"highlight","description":"Next, the function initializes various handlers for different components of the application, such as stream handling, authentication, and API endpoints.","file":"router/router.go","highlight":[{"start":66,"end":99}],"title":"","id":"549"},{"type":"highlight","description":"The router sets up routes for plugin management, allowing for extensibility of the Gotify server.","file":"router/router.go","highlight":[{"start":121,"end":131}],"title":"","id":"550"},{"type":"highlight","description":"Routes for user authentication and management are set up, including user creation and password changes.","file":"router/router.go","highlight":[{"start":133,"end":150}],"title":"","id":"551"},{"type":"highlight","description":"The router sets up routes for managing applications and messages, which are central to Gotify's functionality.","file":"router/router.go","highlight":[{"start":152,"end":204}],"title":"","id":"552"},{"type":"highlight","description":"Finally, the router sets up routes for admin operations, which require elevated privileges.","file":"router/router.go","highlight":[{"start":206,"end":219}],"title":"","id":"553"},{"type":"highlight","description":"The Run function in the runner package is responsible for starting and managing the HTTP server. It handles both HTTP and HTTPS connections, as well as graceful shutdowns.","file":"runner/runner.go","highlight":[{"start":19,"end":58}],"title":"","id":"532"},{"type":"highlight","description":"The New function in the database package initializes the database connection using GORM. It supports multiple database dialects and handles migrations.","file":"database/database.go","highlight":[{"start":18,"end":62}],"title":"","id":"533"},{"type":"highlight","description":"The Auth struct and its methods in the authentication package handle user authentication for different types of requests.","file":"auth/authentication.go","highlight":[{"start":28,"end":53}],"title":"","id":"534"},{"type":"highlight","description":"The MessageAPI struct and its methods handle CRUD operations for messages, which are the core functionality of Gotify.","file":"api/message.go","highlight":[{"start":37,"end":41}],"title":"","id":"535"},{"type":"highlight","description":"The ApplicationAPI struct and its methods handle operations related to applications, which are used to send messages in Gotify.","file":"api/application.go","highlight":[{"start":26,"end":30}],"title":"","id":"536"},{"type":"highlight","description":"The UserAPI struct and its methods handle user-related operations, including creation, updates, and authentication.","file":"api/user.go","highlight":[{"start":60,"end":65}],"title":"","id":"537"},{"type":"highlight","description":"The Manager struct in the plugin package handles the loading and management of plugins, which extend Gotify's functionality.","file":"plugin/manager.go","highlight":[{"start":46,"end":55}],"title":"","id":"538"},{"type":"textOnly","description":"We've explored the core components of the Gotify server, revealing its modular and extensible architecture. As a backend developer, you've seen how the server is structured to handle various aspects of a push notification service:\n\n1. Initialization and Configuration: The main function and Configuration struct set up the server environment.\n2. Routing: The router package defines API endpoints, connecting them to their respective handlers.\n3. Database Management: GORM is used for database operations, supporting multiple dialects.\n4. Authentication: The auth package handles user authentication for different request types.\n5. Core APIs: MessageAPI, ApplicationAPI, and UserAPI handle the main functionalities.\n6. Plugin System: The plugin package allows for extending Gotify's capabilities.\n\nThis architecture facilitates easy maintenance and scalability. As you design APIs for the frontend, consider how this modular approach can inform your decisions, ensuring clean separation of concerns and extensibility.\n\nIn the next part of your learning journey, you'll dive deeper into the API interactions and database operations, building on this foundational understanding of Gotify's architecture.","title":"","id":"539"}]}