{"title":"Frontend | Authentication Flow in Gotify UI","id":"UX+3PeSrg9OstbCs/AW/uD/FK+pK3krI/ZJ08XCH+mo=","steps":[{"type":"textOnly","description":"Welcome to this code tour on authentication in the Gotify UI! We'll explore how user authentication is implemented and managed in the frontend. This tour will cover the key components and processes involved in user login, session management, and API interactions.","title":"","id":"675"},{"type":"highlight","description":"The CurrentUser class is the core of authentication management in the Gotify UI. It handles user login, logout, and session state. Let's examine its key properties:","file":"ui/src/CurrentUser.ts","highlight":[{"start":11,"end":24}],"title":"","id":"708"},{"type":"highlight","description":"The token method is responsible for retrieving and caching the authentication token. It first checks the tokenCache, then falls back to localStorage if needed:","file":"ui/src/CurrentUser.ts","highlight":[{"start":26,"end":38}],"title":"","id":"709"},{"type":"highlight","description":"The login method handles user authentication. It creates a client for the user's session and sets the authentication token upon successful login.","file":"ui/src/CurrentUser.ts","highlight":[{"start":66,"end":99}],"title":"","id":"677"},{"type":"highlight","description":"The initAxios function sets up interceptors for API requests and responses, crucial for authentication. It adds the auth token to outgoing requests and handles various error scenarios:\n\n1. For all requests, it adds the 'X-Gotify-Key' header with the user's token.\n2. For responses, it handles different error types:\n   - Network errors: Notifies the user when the server is unreachable.\n   - 401 (Unauthorized): Attempts to re-authenticate the user.\n   - 400, 403, 500: Displays specific error messages to the user.\n\nThis error handling enhances user experience by providing clear feedback and maintaining authentication state, essential for a smooth frontend interaction.","file":"ui/src/apiAuth.ts","highlight":[{"start":5,"end":29}],"title":"","id":"678"},{"type":"highlight","description":"The Login component renders the login form and handles user input. It uses the CurrentUser store to perform the login action.","file":"ui/src/user/Login.tsx","highlight":[{"start":13,"end":74}],"title":"","id":"679"},{"type":"highlight","description":"The Layout component is crucial for managing the UI based on the user's authentication state. Let's examine how it uses the CurrentUser store to determine what to render.\n\nThe component receives the currentUser store as a prop, which contains the authentication state (loggedIn, authenticating) and user information (name, admin). These properties are destructured from the props:\n\n{loggedIn, authenticating, user: {name, admin}, logout, tryReconnect, connectionErrorMessage}\n\nThe component uses these properties to conditionally render different parts of the UI:\n\n1. If there's a connection error, it displays an error banner.\n2. The Header component receives the authentication state and user info, allowing it to show different options for logged-in vs. logged-out users.\n3. The loginRoute function uses the loggedIn state to either redirect authenticated users to the home page or show the Login component.\n\nThis structure ensures that the UI always reflects the current authentication state, providing a seamless experience as users log in and out.","file":"ui/src/layout/Layout.tsx","highlight":[{"start":54,"end":118}],"title":"","id":"680"},{"type":"highlight","description":"In the main entry point of the application, the CurrentUser store is initialized and an attempt to authenticate the user is made on startup.","file":"ui/src/index.tsx","highlight":[{"start":52,"end":77}],"title":"","id":"681"},{"type":"textOnly","description":"We've explored how authentication is implemented in the Gotify UI. The CurrentUser class manages the authentication state, the Login component provides the user interface, and the authentication token is used in all API requests.\n\nAuthentication state is propagated throughout the application using MobX, a state management library. The @observable decorator on properties in the CurrentUser class allows components to react to changes in the authentication state. This state is made available to components via React context, using the InjectProvider we saw in the main entry point.\n\nThis architecture allows frontend components to easily access and react to authentication state, enabling conditional rendering and secure API calls. As a frontend developer, you'll find this approach familiar and powerful for managing user sessions and access control in the UI.","title":"","id":"682"}]}