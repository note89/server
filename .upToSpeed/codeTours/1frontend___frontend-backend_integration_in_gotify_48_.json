{"title":"Frontend | Frontend-Backend Integration in Gotify","id":"wbM3Ji1NTkwIpMOW7mWOEGHhqJnq/IQDT8NYzSX7faM=","steps":[{"type":"textOnly","description":"Welcome to the Gotify code tour! In this tour, we'll explore how the frontend and backend components of Gotify work together to provide a seamless user experience. We'll focus on API integration, real-time communication, plugin system, and user authentication. Let's get started!","title":"","id":"747"},{"type":"revealFiles","files":["ui/src/apiAuth.ts"],"description":"Let's begin by looking at how the frontend sets up API requests. This file configures Axios interceptors to handle authentication and error responses.","title":"","id":"748"},{"type":"revealFiles","files":["ui/src/user/UserStore.ts"],"description":"Now let's see how the API is used in practice. The UserStore handles user-related API calls.","title":"","id":"749"},{"type":"textOnly","description":"Let's explore the UserAPI, which handles user-related requests on the backend. This API is crucial for managing users, authentication, and authorization in Gotify.","title":"","id":"758"},{"type":"highlight","description":"The UserDatabase interface defines the methods for interacting with user data in the database. This abstraction allows for flexibility in the underlying database implementation.","file":"api/user.go","highlight":[{"start":14,"end":23}],"title":"","id":"759"},{"type":"highlight","description":"The UserChangeNotifier struct and its methods handle notifications for user changes, such as user deletion or creation. This is crucial for maintaining consistency across the system when user data changes.","file":"api/user.go","highlight":[{"start":25,"end":57}],"title":"","id":"760"},{"type":"highlight","description":"The GetUsers and GetCurrentUser methods handle requests to retrieve user information. These are essential for displaying user lists and current user details in the frontend.","file":"api/user.go","highlight":[{"start":67,"end":130}],"title":"","id":"761"},{"type":"highlight","description":"The CreateUser method handles the creation of new users. It includes logic for handling admin creation and registration settings, which is important for understanding user management in Gotify.","file":"api/user.go","highlight":[{"start":132,"end":219}],"title":"","id":"762"},{"type":"highlight","description":"The UpdateUserByID and DeleteUserByID methods handle updating and deleting user information. These operations are crucial for user management and include checks to prevent deleting the last admin user.","file":"api/user.go","highlight":[{"start":272,"end":330}],"title":"","id":"763"},{"type":"highlight","description":"The ChangePassword method allows users to update their passwords. This is an important security feature that enables users to maintain control over their account access.","file":"api/user.go","highlight":[{"start":332,"end":373}],"title":"","id":"764"},{"type":"revealFiles","files":["ui/src/message/WebSocketStore.ts"],"description":"Real-time communication is handled by WebSockets. The WebSocketStore manages the WebSocket connection on the frontend.","title":"","id":"751"},{"type":"revealFiles","files":["api/stream/stream.go"],"description":"The stream package handles WebSocket connections on the backend, enabling real-time communication between the server and clients. This is crucial for instantly delivering notifications to the frontend.\n\nKey points in this file:\n1. The API struct manages WebSocket clients and broadcasts messages.\n2. It handles client connections, disconnections, and message routing.\n3. The Notify method sends messages to specific users in real-time.\n\nThis backend implementation complements the WebSocketStore we saw earlier in the frontend, creating a full-duplex communication channel. When the frontend establishes a WebSocket connection, this package manages that connection on the server side, ensuring that notifications are delivered instantly to the correct users.","title":"","id":"752"},{"type":"revealFiles","files":["ui/src/plugin/PluginStore.ts"],"description":"Gotify's plugin system allows for extending functionality on both frontend and backend. The PluginStore manages plugin-related operations on the frontend, interacting with the backend API to handle plugin configurations, states, and capabilities. This file demonstrates how the frontend communicates with the backend for plugin management, showcasing the integration between the two components.\n\nNotice methods like 'requestConfig', 'requestDisplay', and 'changeEnabledState'. These methods make API calls to the backend, allowing the frontend to retrieve and update plugin information. This interaction is crucial for maintaining a consistent state between the frontend and backend, and for enabling dynamic plugin functionality in the user interface.\n\nAs you review the code, consider how this integration allows for a flexible and extensible notification system, where new features can be added through plugins without modifying the core application.","title":"","id":"753"},{"type":"revealFiles","files":["api/plugin.go"],"description":"On the backend, the PluginAPI handles plugin-related requests and manages plugin configurations.","title":"","id":"754"},{"type":"revealFiles","files":["ui/src/CurrentUser.ts"],"description":"User authentication is managed by the CurrentUser class on the frontend. This handles login, logout, and token management.","title":"","id":"755"},{"type":"revealFiles","files":["auth/authentication.go"],"description":"The Auth struct on the backend provides middleware for authentication, which is crucial for frontend security. As a frontend developer, understanding this helps you implement secure API calls and manage user sessions effectively.\n\nThis Auth struct works in tandem with the CurrentUser class we saw earlier. When you make API requests from the frontend, this middleware ensures that only authenticated users can access protected endpoints.\n\nPay attention to how tokens are validated and how user roles (like admin) are checked. This knowledge will help you handle authentication states, error responses, and user permissions more effectively in your frontend code.","title":"","id":"756"},{"type":"textOnly","description":"Great job! You've now seen how Gotify integrates its frontend and backend components. We've covered API integration, real-time communication with WebSockets, the plugin system, and user authentication. These components work together to provide a robust and extensible notification system. Feel free to explore the codebase further to deepen your understanding.","title":"","id":"757"}]}