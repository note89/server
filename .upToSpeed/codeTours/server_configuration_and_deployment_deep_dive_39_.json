{"title":"Server Configuration and Deployment Deep Dive","id":"WmcN05vUBpztFWFxal3baA7NDkG70DMs3s9uVNk+038=","steps":[{"type":"textOnly","description":"Welcome to the tour of Gotify's server configuration and deployment options. In this tour, we'll explore how Gotify manages its configuration, initializes the server, and supports various deployment scenarios. We'll start by looking at the configuration structure and then move on to server initialization and deployment options.","title":"","id":"621"},{"type":"highlight","description":"Let's begin by examining the Configuration struct in config.go. This struct defines all the configurable options for the Gotify server. We'll explore its components in detail over the next few steps.","file":"config/config.go","highlight":[{"start":11,"end":12}],"title":"","id":"632"},{"type":"highlight","description":"The Server struct within the Configuration defines the basic server settings. It includes options for the keep-alive period, listen address, and port. These settings allow you to control how the server listens for incoming connections.","file":"config/config.go","highlight":[{"start":13,"end":16}],"title":"","id":"633"},{"type":"highlight","description":"The SSL struct configures HTTPS for the server. It includes options to enable SSL, redirect HTTP to HTTPS, set the SSL port, and specify certificate files. It also includes settings for Let's Encrypt, which can be used for automatic SSL certificate management.","file":"config/config.go","highlight":[{"start":18,"end":31}],"title":"","id":"634"},{"type":"highlight","description":"The Stream struct configures WebSocket settings for real-time updates, while the Cors struct defines Cross-Origin Resource Sharing (CORS) settings. These are crucial for enabling real-time functionality and allowing cross-origin requests, which can be important when integrating Gotify with other services or front-end applications.","file":"config/config.go","highlight":[{"start":32,"end":44}],"title":"","id":"635"},{"type":"highlight","description":"The remaining configuration options include database settings, default user credentials, password strength, and paths for uploaded images and plugins. The Registration boolean determines whether new user registrations are allowed. These settings provide flexibility in how Gotify is set up and used in different environments.","file":"config/config.go","highlight":[{"start":45,"end":57}],"title":"","id":"636"},{"type":"highlight","description":"Now, let's look at how Gotify loads its configuration. The Get function is responsible for loading the configuration from environment variables and config files.","file":"config/config.go","highlight":[{"start":66,"end":75}],"title":"","id":"623"},{"type":"revealFiles","files":["config.example.yml"],"description":"Let's examine the config.example.yml file, which serves as a template for customizing Gotify server deployment. This file contains crucial configuration options that significantly impact server behavior:\n\n1. Server settings: Define the listening address, port, and SSL configuration.\n2. Database configuration: Specify the database dialect and connection string.\n3. User management: Set up the default admin user and control user registration.\n4. Security features: Configure CORS, trusted proxies, and SSL/TLS options.\n5. Plugin and file storage: Specify directories for plugins and uploaded images.\n\nPay special attention to the SSL and database sections, as they're critical for secure and scalable deployments. The 'server' section allows fine-tuning of HTTP/HTTPS behavior, which is essential for API design and frontend integration.","title":"","id":"624"},{"type":"highlight","description":"Now that we understand the configuration, let's see how it's used to initialize the server. The main function in app.go is the entry point for the Gotify server.","file":"app.go","highlight":[{"start":28,"end":58}],"title":"","id":"625"},{"type":"highlight","description":"A key part of server initialization is setting up the router. Let's look at the Create function in router.go.","file":"router/router.go","highlight":[{"start":27,"end":51}],"title":"","id":"626"},{"type":"highlight","description":"After initialization, the server needs to be started. The Run function in runner.go handles this process.","file":"runner/runner.go","highlight":[{"start":20,"end":58}],"title":"","id":"627"},{"type":"revealFiles","files":["docker/Dockerfile"],"description":"Gotify supports Docker deployment, offering flexibility and ease of deployment across various architectures. Let's examine the main Dockerfile and discuss the deployment options:\n\nThe main Dockerfile (shown here) defines how the Gotify server image is built for AMD64 architecture. It uses a Debian base image, sets up the necessary environment, and includes the Gotify application.\n\nGotify also supports deployment on multiple architectures. In addition to this main Dockerfile, there are separate Dockerfiles for ARM64, ARMv7, and RISC-V 64-bit architectures in the docker/ directory. This multi-architecture support allows Gotify to be deployed on a wide range of hardware platforms, from cloud servers to edge devices and IoT.\n\nThe Makefile in the project root contains tasks for building Docker images for each supported architecture. These tasks (build-docker-amd64, build-docker-arm-7, build-docker-arm64, build-docker-riscv64) compile the Gotify binary for the target architecture and build the corresponding Docker image.\n\nThis flexible Docker-based deployment system allows you to easily deploy Gotify in various environments, which is crucial when designing APIs that need to support different deployment scenarios.","title":"","id":"628"},{"type":"textOnly","description":"Gotify supports deployment on multiple architectures. In addition to the main Dockerfile we just saw, there are separate Dockerfiles for ARM64, ARMv7, and RISC-V 64-bit architectures in the docker/ directory. This allows Gotify to be deployed on a wide range of hardware platforms.","title":"","id":"629"},{"type":"highlight","description":"The Makefile defines various tasks for building and deploying Gotify. Let's look at some key tasks.","file":"Makefile","highlight":[{"start":66,"end":122}],"title":"","id":"630"},{"type":"textOnly","description":"Let's discuss the trade-offs between different deployment options for Gotify:\n\n1. Bare-metal deployment:\n   + Full control over the environment\n   + Potentially better performance\n   - Requires more manual setup and maintenance\n\n2. Docker deployment:\n   + Easy to set up and manage\n   + Consistent environment across different systems\n   + Supports multiple architectures (AMD64, ARM, RISC-V)\n   - Slight performance overhead\n\n3. Cloud deployment (e.g., using Docker on cloud platforms):\n   + Scalability and high availability\n   + Managed infrastructure\n   - Potentially higher costs\n   - Less control over the underlying infrastructure\n\nConsider your specific needs, resources, and expertise when choosing a deployment option. Docker offers a good balance of ease-of-use and flexibility for most use cases.","title":"","id":"631"}]}