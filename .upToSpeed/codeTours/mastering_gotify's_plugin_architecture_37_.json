{"title":"Mastering Gotify's Plugin Architecture","id":"N37309zqVU7v+KlQQ4V51wTdaCJ5L1LowhHSZqoG6eE=","steps":[{"type":"textOnly","description":"Welcome to the Gotify plugin system tour! In this tour, we'll explore how Gotify's plugin architecture enables extensibility, allowing developers to add new features and functionality to the server. We'll look at the core components of the plugin system, how to create and enable plugins, and the different capabilities plugins can have.","title":"","id":"586"},{"type":"highlight","description":"Let's start by examining the core interfaces and structures that define Gotify's plugin system. The `Plugin` interface is the foundation of the plugin architecture.","file":"plugin/compat/plugin.go","highlight":[{"start":3,"end":8}],"title":"","id":"587"},{"type":"textOnly","description":"The `Plugin` interface defines three key methods:\n1. `PluginInfo()`: Returns metadata about the plugin.\n2. `NewPluginInstance()`: Creates a new instance of the plugin for a specific user.\n3. `APIVersion()`: Specifies the API version the plugin is compatible with.\n\nThese methods allow Gotify to manage and interact with plugins in a standardized way.","title":"","id":"588"},{"type":"highlight","description":"The `Info` struct encapsulates metadata about a plugin. This information is used by Gotify to display and manage plugins.","file":"plugin/compat/plugin.go","highlight":[{"start":10,"end":22}],"title":"","id":"589"},{"type":"highlight","description":"The `PluginInstance` interface is the core of Gotify's plugin system. It defines the methods that each plugin instance must implement, allowing Gotify to interact with plugins in a standardized way.","file":"plugin/compat/instance.go","highlight":[{"start":25,"end":49}],"title":"","id":"613"},{"type":"textOnly","description":"Let's break down the core methods of the PluginInstance interface:\n\n1. `Enable() error`: Called when the plugin is enabled. Use this to initialize resources or start background tasks.\n2. `Disable() error`: Called when the plugin is disabled. Use this to clean up resources or stop background tasks.\n3. `Supports() Capabilities`: Returns the capabilities supported by the plugin.\n\nThese methods form the foundation of a plugin's lifecycle and functionality within Gotify.","title":"","id":"614"},{"type":"highlight","description":"The Configurer capability allows plugins to have custom configurations. Let's look at the methods related to this capability:","file":"plugin/compat/instance.go","highlight":[{"start":33,"end":36}],"title":"","id":"615"},{"type":"highlight","description":"The Messenger capability enables plugins to send messages through Gotify. Here's the method related to this capability:","file":"plugin/compat/instance.go","highlight":[{"start":38,"end":39}],"title":"","id":"616"},{"type":"highlight","description":"The Webhooker capability allows plugins to register custom webhooks. This is useful for plugins that need to receive external data or trigger actions based on HTTP requests:","file":"plugin/compat/instance.go","highlight":[{"start":41,"end":42}],"title":"","id":"617"},{"type":"highlight","description":"The Storager capability enables plugins to handle persistent data storage. This is useful for plugins that need to save and retrieve data across sessions:","file":"plugin/compat/instance.go","highlight":[{"start":44,"end":45}],"title":"","id":"618"},{"type":"highlight","description":"The Displayer capability allows plugins to provide custom display information. This can be used to show plugin-specific data or UI elements in the Gotify interface:","file":"plugin/compat/instance.go","highlight":[{"start":30,"end":31}],"title":"","id":"619"},{"type":"textOnly","description":"Now that we've explored the various plugin capabilities, let's recap:\n\n- Configurer: Custom plugin configurations\n- Messenger: Sending messages through Gotify\n- Webhooker: Registering custom webhooks\n- Storager: Handling persistent data storage\n- Displayer: Providing custom display information\n\nThink about how these capabilities can be combined to create powerful plugins. For example, a weather plugin might use the Configurer to set up API keys, the Webhooker to receive weather alerts, the Messenger to send notifications, and the Displayer to show current weather information in the Gotify UI.","title":"","id":"620"},{"type":"textOnly","description":"Gotify plugins can have different capabilities, such as:\n- Messenger: Sending messages\n- Configurer: Managing plugin configuration\n- Storager: Handling data storage\n- Webhooker: Registering webhooks\n- Displayer: Providing custom display information\n\nThese capabilities allow plugins to extend various aspects of Gotify's functionality.","title":"","id":"591"},{"type":"highlight","description":"Let's look at how to create a minimal Gotify plugin. This example demonstrates the basic structure required for a functional plugin.","file":"plugin/example/minimal/main.go","highlight":[{"start":1,"end":35}],"title":"","id":"592"},{"type":"textOnly","description":"A Gotify plugin must implement several key components to integrate with the server:\n\n1. `GetGotifyPluginInfo()`: Provides metadata about the plugin.\n2. A struct (e.g., `Plugin`) that implements the `compat.PluginInstance` interface.\n3. `NewGotifyPluginInstance()`: Creates a new instance of the plugin for a user.\n\nLet's expand on the `Plugin` struct to demonstrate multiple capabilities:\n\n```go\ntype Plugin struct {\n    // Fields for storing plugin state\n}\n\nfunc (p *Plugin) Enable() error {\n    // Initialize plugin resources\n    return nil\n}\n\nfunc (p *Plugin) Disable() error {\n    // Clean up plugin resources\n    return nil\n}\n\nfunc (p *Plugin) GetDisplay(location *url.URL) string {\n    // Implement Displayer capability\n    return \"Custom display information\"\n}\n\nfunc (p *Plugin) SetMessageHandler(h plugin.MessageHandler) {\n    // Implement Messenger capability\n    // Store the handler for sending messages\n}\n\nfunc (p *Plugin) Supports() plugin.Capabilities {\n    return plugin.Capabilities{Messenger: true, Displayer: true}\n}\n```\n\nThis example shows how a plugin can implement multiple capabilities (Messenger and Displayer) while adhering to the `compat.PluginInstance` interface. The `Supports()` method declares which capabilities the plugin provides, allowing Gotify to interact with it appropriately.\n\nBy implementing these components, you enable Gotify to manage the plugin's lifecycle and leverage its capabilities within the server ecosystem.","title":"","id":"593"},{"type":"textOnly","description":"Now that we've created a basic plugin, let's look at how to enable it in Gotify. The process involves two main steps:\n\n1. Registering the plugin with Gotify:\n   - Place the compiled plugin (.so file) in Gotify's plugin directory.\n   - Restart the Gotify server to detect the new plugin.\n\n2. Enabling the plugin for use:\n   - Use the Gotify API to enable the plugin for a specific user.\n   - Send a POST request to '/plugin/:id/enable' with the plugin ID.\n\nFor example, using curl:\n\n```\ncurl -X POST 'http://localhost:80/plugin/1/enable' \\\n     -H 'X-Gotify-Key: <your-admin-token>'\n```\n\nEnabling a plugin allows it to interact with Gotify's core functionality, such as sending messages or registering webhooks, depending on its capabilities.\n\nRemember, as a backend developer, you'll want to ensure that your API design accommodates the needs of plugins, allowing for seamless integration with the frontend.","title":"","id":"594"},{"type":"highlight","description":"The `NewManager` function initializes the plugin manager, loads plugins from a directory, and sets up instances for each user.","file":"plugin/manager.go","highlight":[{"start":56,"end":101}],"title":"","id":"595"},{"type":"highlight","description":"The `SetPluginEnabled` method allows Gotify to enable or disable plugins dynamically.","file":"plugin/manager.go","highlight":[{"start":117,"end":148}],"title":"","id":"596"},{"type":"highlight","description":"Plugins can have configurations that are managed by Gotify. The `PluginConf` struct represents the configuration for a plugin instance.","file":"model/pluginconf.go","highlight":[{"start":3,"end":13}],"title":"","id":"597"},{"type":"highlight","description":"The `PluginConfExternal` struct is used to expose plugin configuration information through Gotify's API.","file":"model/pluginconf.go","highlight":[{"start":15,"end":69}],"title":"","id":"598"},{"type":"highlight","description":"Gotify provides API endpoints for managing plugins, which is crucial for frontend-backend integration. The `PluginAPI` struct handles these endpoints, acting as a bridge between the frontend requests and the backend plugin management system.\n\nAs a backend developer, understanding this structure is vital for designing APIs that meet frontend needs. The `PluginAPI` encapsulates the necessary dependencies (Notifier, Manager, and DB) to handle plugin-related operations, ensuring a clean separation of concerns.\n\nWhen designing similar APIs, consider:\n1. What operations the frontend needs to perform\n2. How to structure your API to provide those operations efficiently\n3. What dependencies your API handlers require to fulfill frontend requests\n\nThis approach allows for a flexible and maintainable plugin management system that can easily adapt to future frontend requirements.","file":"api/plugin.go","highlight":[{"start":25,"end":29}],"title":"","id":"599"},{"type":"highlight","description":"The `GetPlugins` method retrieves information about all plugins for a user.","file":"api/plugin.go","highlight":[{"start":63,"end":87}],"title":"","id":"600"},{"type":"textOnly","description":"Congratulations on completing the Gotify plugin system tour! You've explored the core components of the plugin architecture, learned how to create a basic plugin, and understood how Gotify manages and interacts with plugins.\n\nNow, let's put your knowledge into practice with a quick exercise:\n\nCreate a simple 'Hello World' plugin that implements the Messenger capability. Your plugin should:\n1. Implement the required Plugin and PluginInstance interfaces.\n2. Send a 'Hello World' message when enabled.\n3. Use the SetMessageHandler method to handle incoming messages.\n\nThis exercise will reinforce your understanding of plugin creation and integration, leveraging your Go expertise while exploring Gotify's extensibility.\n\nAfter completing the exercise, consider exploring more complex plugins in the Gotify repository to deepen your understanding. Happy coding!","title":"","id":"601"}]}